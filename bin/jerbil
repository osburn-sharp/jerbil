#! /usr/bin/ruby
#
# Jerbil - Jumpin Emin's Reliable Broker for Integrated Linux services
#
# Author:: Robert Sharp
# Copyright:: Copyright (c) 2010 Robert Sharp
# License:: Open Software Licence v3.0
#
# This software is licensed for use under the Open Software Licence v. 3.0
# The terms of this licence can be found at http://www.opensource.org/licenses/osl-3.0.php
# and in the file copyright.txt. Under the terms of this licence, all derivative works
# must themselves be licensed under the Open Software Licence v. 3.0
#
# user utility to question the Jerbil network
# 
require 'jerbil'
require 'jerbil/server'
require 'jerbil/config'
require 'jerbil/version'
require 'socket'
require 'drb'
require 'optparse'
require 'rubygems'

require 'term/ansicolor'
class String
  # makes the colouring functions into string methods
  include Term::ANSIColor
end

config_file='/etc/jermine/jerbil.conf'
cmd = :check_local
verbose = false
quiet = false
verify = false

OptionParser.new do |opts|

  opts.banner = "Usage: jerbil [opts]"
  opts.separator ""
  opts.separator " Utility to interogate and manage the local Jerbil server"
  opts.separator ""

  opts.on("-l", "--list", "List Services") do
    cmd = :list
  end

  opts.on("-S", "--servers", "List live Servers") do
    cmd = :servers
  end
  
  opts.on("-C", "--config-servers", "List Servers in config file") do
    cmd = :config_servers
  end

  opts.on("-c", "--config [file]", String, "use this config file to find Jerbil" ) do |cfile|
    if FileTest.readable?(cfile) then
      config_file = cfile
    else
      puts "Config file cannot be read."
      exit 1
    end
  end

  opts.on("-v", "--verify", "verify that services are running") do
    verify = true
  end

  opts.on("-V", "--verbose", "output more information about what is going on ") do
    verbose = true
  end

  opts.on("-q", "--quiet", "output nothing and return 0 or 1 depending on local server") do
    quiet = true
  end

  opts.on("-h", "--help", "Provide Help") do |h|
    opts.separator ""
    puts opts
    exit 0
  end

end.parse!

puts "Jerbil v" + Jerbil::Version unless quiet

options = Jerbil::Config.new(config_file)
servers = options[:servers]
local = Jerbil::Server.get_local_server(servers)
#puts options.inspect

if quiet then
  begin
    jerbs = local.connect
    jerbs.verify
    exit 0
  rescue
    exit 1
  end
end

case cmd

when :check_local
  puts "Checking for local Jerbil server"
  begin
    jerbs = local.connect
    started = jerbs.started
    puts "  Jerbil server found, version: #{jerbs.version}"
    puts "  Server has been up since #{started.strftime('%d %b %Y at %H:%M')}"
    puts "  and has had #{jerbs.registrations.to_s} registrations"
  rescue Exception => err
    puts "  Server did not respond: #{err.message}".red.bold
  end


when :config_servers
  puts "Jerbil is configured with the following servers:"
  servers.each do |server|
    puts "  #{server.fqdn}, key: [#{server.key}]"
  end

when :servers
  puts "Jerbil server status is:"

  servers.each do |server|
    connect = false
    begin
      jerbs = server.connect
      jerbs.verify
      connect = true
    rescue
      # do nothing
    end
    puts "   #{server.fqdn}: #{connect ? 'OK' : 'no response'}"
  end

when :list
  services = []
  begin
    jerbs = local.connect
    services = jerbs.get_all(true) # ignore this access
  rescue
    puts "Failed to connect to the local Jerbil server"
  end
  puts "There are #{services.length} services registered with Jerbil:"
  services.each do |s|
    puts "  #{s.name}[:#{s.env}]@#{s.host}:#{s.port}"
    puts "    started at: #{s.registered_at.strftime('%d/%m/%y %H:%M')}" if verbose
    puts "    accessed #{s.access_count.to_s} times, last time at: #{s.accessed_at.strftime('%d/%m/%y %H:%M')}" if verbose
    if verify then
      service = jerbs.get(s.args)
      if service.nil? then
        puts "  Verify failed. Service has been removed"
      else
        puts "  Verify succeeded"
      end
    end
  end

end

exit 0

