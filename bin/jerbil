#!/usr/bin/env ruby
#
#
#
# = Jerbil command line
#
# == useful things to do with Jerbil
#
# Author:: Robert Sharp
# Copyright:: Copyright (c) 2013 Robert Sharp
# License:: Open Software Licence v3.0
#
# This software is licensed for use under the Open Software Licence v. 3.0
# The terms of this licence can be found at http://www.opensource.org/licenses/osl-3.0.php
# and in the file copyright.txt. Under the terms of this licence, all derivative works
# must themselves be licensed under the Open Software Licence v. 3.0
#
# 
#

require 'optplus'
require 'optplus/IO'
require 'jerbil'
require 'jellog/proxy'
require 'colored'
require 'socket'

class Jerbs < Optplus::Parser
  
  include Optplus::IO
  
  usage "[options] actions"
  
  description "Provide information on Jerbil servers and services"
  
  def options(opts)
    
    opts.on('-a', '--all', 'show all servers or services') do |a|
      set_option :all, a
    end
    
    opts.on('-H', '--host STRING', String, 'show services on given host') do |h|
      hostname = resolve_hostname(h)
      set_option :host, hostname
    end
    
    opts.on('-c', '--config [FILE]', String, 'use the given config file') do |c|
      if FileTest.exists?(c) then
        set_option :config, c
      else
        alert "the config file given does not exist"
      end
    end
  
    opts.on('-v', '--verify', 'verify the connections') do |c|
      set_option :verify, c
    end
  
    debug_option(opts)
    
    verbose_option(opts)

  end
  
  def before_actions
    @logger = Jellog::ProxyLogger.new("Jerbil")
    @config = Jerbil.get_config(get_option(:config))
    @server = Jerbil::Servers.get_local_server(@config[:environment])
  rescue Jeckyl::ConfigFileMissing
    exit_on_error "Error: No config file #{config_file ? config_file : '/etc/jerbil/jerbil.rb'}"
  end
  
  
  describe :status, "show the status of the local server"
  help :status, "  jerbil status",
    "",
    "Display status information about the local Jerbil server, such as its version",
    "and the time it was started"
    
  def status
    say "Checking for local Jerbil server running in env: #{@config[:environment]}"
    jerbs = @server.connect
    started = jerbs.started
    say_ok "Jerbil server found, version: #{jerbs.version}".green
    say "  Server has been up since #{started.strftime('%d %b %Y at %H:%M')}"
    say "  and has had #{jerbs.registrations.to_s} registrations."
  rescue Jerbil::JerbilError
    show_err "Jerbil Server Error"
  rescue DRb::DRbError
    show_err "Server did not respond"
  end
  
  
  describe :remotes, "list the remote servers on the network"
  help :remotes, "  jerbil remotes [-vV]",
    "List remote servers and optionally verify the server is running.",
    "Verbose listing does little atm but display the Ruby version."
    
  def remotes
    say "Checking for remote Jerbil servers running in env: #{@config[:environment]}"
    jerbs = @server.connect
    remotes = jerbs.remote_servers
    remotes.each do |remote|
      if option?(:verify) then
        begin
          remote.connect.verify
          say_ok "  #{remote.ident}"
        rescue
          say "  #{remote.ident}".red
        end
      else
        say "  #{remote.ident}".cyan
      end #
      if option? :verbose then
        begin
          say "    Jerbil server version: #{remote.connect.version}"
          say "    Running under Ruby version: #{remote.connect.ruby_version}"
          say "    Remote server has been up since #{remote.connect.started.strftime('%d %b %Y at %H:%M')}"
        rescue
          warn "    No info on ruby version from this server"
        end
      end
    end
    unless remotes && remotes.length > 0
      # no remotes
      warn "There are no remote servers registered at this time"
    end
      
  rescue Jerbil::JerbilError
    show_err "Jerbil Server Error"
  rescue DRb::DRbError
    show_err "Jerbil Server did not respond"
    
  end
  
  describe :services, "list the services registered with Jerbil"
  help :services, "  jerbil services [-avV -h <hostname>]",
    "Display the services registered with the local Jerbil Server.",
    "By default, these are just the local services. To see services",
    "on remote servers use the -a switch. You can also see just those",
    "services on a given host with the -h switch. To verify that the services",
    "are operating, use the -v switch."
    
  def services
    jerbs = @server.connect
    local_host = Socket.gethostname
    if option?(:all) then
      servers = jerbs.get_all_by_server
      servers.each_pair do |name, services|
        puts "Services for #{name}:"
        display_services(services, jerbs)
      end
      unless servers && servers.length > 0
        warn "There are no servers and therefore services registered with Jerbil"
      end
      return
    elsif option?(:host) then
      services = jerbs.find(host: get_option(:host), ignore_access: true)
    else
      services = jerbs.find(host: local_host, ignore_access: true)
    end
    display_services(services, jerbs)
          
  rescue Jerbil::JerbilError
    show_err "Jerbil Server Error"
  rescue DRb::DRbError
    show_err "Jerbil Server did not respond"
  end
  
  describe :secret, "generate a random secret key for the Jerbil Servers"
  def secret
    puts "Paste the following into the config files for each server"
    key = Digest::SHA1.hexdigest(Time.now.to_s + rand(12341234).to_s)
    puts 'secret "' + key + '"'
  end
  
  describe :readme, 'Display the Jerbil Readme file by whatever means is best'
  def readme
    gem_spec = Gem::Specification.find_by_name('jerbil')
    readme_path = File.join(gem_spec.gem_dir, 'README.md')
    if FileTest.exists?('/usr/bin/markdown_py') then
      exec "markdown_py #{readme_path} | lynx -stdin"
    else
      exec "less #{readme_path}"
    end    
  end
  
  # if hostname is not FQDN then get the FQDN
  def resolve_hostname(host)
    if host.split('.').length > 1 then
      return host
    else
      myhost = Socket.gethostname.split('.')
      myhost[0] = host
      return myhost.join('.')
    end
  end
  
  # helper method to display service information
  def display_services(services, jerbs)
    unless services && services.length > 0
      warn "There are no services registered with Jerbil"
      return false
    end

    services.each do |s|
      puts "  #{s.name}[:#{s.env}]@#{s.host}:#{s.port}".cyan
      if option? :verbose then
        puts "    started at: #{s.registered_at.strftime('%d/%m/%y %H:%M')}"
        puts "    accessed #{s.access_count.to_s} times, last time at: #{s.accessed_at.strftime('%d/%m/%y %H:%M')}"
      end
      if option? :verify then
        if jerbs.service_missing?(s) then
          puts "  #{s.ident} has failed and should be removed".red
        else
          puts "  #{s.ident} responded".green
        end
      end
    end
    
  end # display_services
  
  # helper method to show errors
  def show_err(msg)
    alert msg + ':'
    puts "  #{$!.message}"
  end
  
end

Jerbs.run!